##10/30/23, project is basically done, my boss says that I'm pretty much jesus and albert einstein combined. W


import tkinter as tk
from tkinter import filedialog
import PyPDF2
import openpyxl
import os
import re

class PDFExtractorGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("PDF Data Extractor")

        self.label1 = tk.Label(master, text="Select PDF Folder:")
        self.label1.pack()

        self.folder_path = tk.StringVar()
        self.entry1 = tk.Entry(master, textvariable=self.folder_path, width=50)
        self.entry1.pack()

        self.browse_button = tk.Button(master, text="Browse", command=self.browse_folder)
        self.browse_button.pack()

        self.label2 = tk.Label(master, text="Enter Row Number:")
        self.label2.pack()

        self.row_number = tk.IntVar()
        self.entry2 = tk.Entry(master, textvariable=self.row_number)
        self.entry2.pack()

        self.extract_button = tk.Button(master, text="Extract Data", command=self.extract_data)
        self.extract_button.pack()

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        self.folder_path.set(folder_selected)

    def extract_data(self):
        pdf_folder = self.folder_path.get()
        row_number = self.row_number.get()

        for root, dirs, files in os.walk(pdf_folder):
            for file in files:
                if file.endswith('.pdf'):
                    pdf_file_path = os.path.join(root, file)
                    update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
                    row_number += 1

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        model_pattern = re.compile(r'Model\s*:\s*([^\n]*\n[^\n]*)', re.DOTALL)
        pcsn_pattern = re.findall(r'Serial\s*:\s*(\S+)', extracted_text)#pcsn_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        stat_matches = re.findall(r'Status\s*:\s*(\S+)',extracted_text)

        sn_match = serial_pattern.search(extracted_text)
        model_match = model_pattern.search(extracted_text)
        #pcsn_match = pcsn_pattern.search(extracted_text)
        

        sn = sn_match.group(1) if sn_match else None
        model_info = model_match.group(1).strip() if model_match else None
        pcsn = pcsn_pattern[1] if pcsn_pattern else None #pcsn = pcsn_match.group(1) if pcsn_match else None
        stat = stat_matches[1] if stat_matches else None

        
    
    return sn, model_info, pcsn, stat

def update_spreadsheet(pdf_path, spreadsheet, row):
    sn, mod, pcsn, stat = extract_information(pdf_path)     #5th, make sn,mod,pcsn, and stat equal to pdf_path variable, after its been operated on by extract_information

    wb = openpyxl.load_workbook(spreadsheet)#may need to add mode=a bc stackoverflow said to        ### 22, The problem starts here.
    ws = wb['sheet']

    info = [sn, pcsn, mod, stat]
    columns = ['A', 'B', 'C', 'D']

    for col, value in zip(columns, info):
        cell = f"{col}{row}"
        ws[cell].value = value

    wb.save(spreadsheet)

spreadsheet_path = r'C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\Scripts\test1\SERIAL2.xlsx'

root = tk.Tk()
app = PDFExtractorGUI(root)
root.mainloop()

#need to automate the row selection portion
#add another text input box for spreadsheet path (and maybe the name of the
#sheet)
#maybe a little thingy that says the operation was successful, probably
#unnecessary tho

###the pcsn is no longer there, just realized.###
###the last time the pcsn was actually there is s8###
###crisis diverted###
