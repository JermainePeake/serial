import PyPDF2
import openpyxl
import os
import re

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)')
        mod_pattern = re.compile(r'Model\s*:\s*(\S+)')
        pcsn_pattern = re.compile(r'Serial\s*:\s*.*?Serial\s*:\s*(\S+)')
        stat_pattern = re.compile(r'Status\s*:\s*.*?Status\s*:\s*(\S+)')

        sn_match = serial_pattern.search(extracted_text)
        mod_match = mod_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        mod = mod_match.group(1) if mod_match else None
        pcsn = pcsn_match.group(1) if pcsn_match else None
        stat = stat_match.group(1) if stat_match else None
    return sn, mod, pcsn, stat









 serial_pattern = re.compile(r'Serial\s*:\s*(\S+)')
        mod_pattern = re.compile(r'Model\s*:\s*(\S+)')
        pcsn_pattern = re.compile(r'Serial(?:[^S]*Serial(?:[^S]*Serial\s*(\S+))?')
        stat_pattern = re.compile(r'Status(?:[^S]*Status(?:[^S]*Status\s*(\S+))?')

        sn_match = serial_pattern.search(extracted_text)
        mod_match = mod_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        mod = mod_match.group(1) if mod_match else None
        pcsn = pcsn_match.group(2) if pcsn_match else None
        stat = stat_match.group(2) if stat_match else None
    print(sn,mod,pcsn,stat)
    return sn, mod, pcsn, stat








import re

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        mod_pattern = re.compile(r'Model\s*:\s*(\S+)', re.IGNORECASE)
        pcsn_pattern = re.compile(r'Serial(?:[^S]*Serial\s*:\s*(\S+))?')
        stat_pattern = re.compile(r'Status(?:[^S]*Status\s*:\s*(\S+))?')

        sn_match = serial_pattern.search(extracted_text)
        mod_match = mod_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        mod = mod_match.group(1) if mod_match else None
        pcsn = pcsn_match.group(1) if pcsn_match else None
        stat = stat_match.group(1) if stat_match else None

    print(sn, mod, pcsn, stat)
    return sn, mod, pcsn, stat






import re

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        mod_pattern = re.compile(r'Model\s*:\s*(\S+)', re.IGNORECASE)
        pcsn_pattern = re.compile(r'Serial\s*:\s*(\S+)(?:[^S]*Serial\s*:\s*(\S+))?')
        stat_pattern = re.compile(r'Status\s*:\s*(\S+)(?:[^S]*Status\s*:\s*(\S+))?')

        sn_match = serial_pattern.search(extracted_text)
        mod_match = mod_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        mod = mod_match.group(1) if mod_match else None
        pcsn = pcsn_match.group(1) if pcsn_match else None
        stat = stat_match.group(1) if stat_match else None

    print(sn, mod, pcsn, stat)
    return sn, mod, pcsn, stat




serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        mod_pattern = re.compile(r'Model\s*:\s*(\S+)', re.IGNORECASE)
        pcsn_pattern = re.compile(r'Serial\s*:\s*(\S+)(?:[^S]*Serial\s*:\s*(\S+))?')
        stat_pattern = re.compile(r'Status\s*:\s*(\S+)(?:[^S]*Status\s*:\s*(\S+))?')
        
        sn_match = serial_pattern.search(extracted_text)
        mod_match = mod_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        mod = mod_match.group(1) if mod_match else None
        pcsn = pcsn_match.group(2) if pcsn_match else None
        stat = stat_match.group(2) if stat_match else None
    print(sn,mod,pcsn,stat)
    return sn, mod, pcsn, stat


#this is the output, and remember the code I wrote is
#print(sn, mod, pcsn, stat). sn is correct, mod is basically correct don't worry about that rn
#pcsn is the first Serial, not the second (you can tell because it is a duplicate of sn)
#stat is also using its first occurence of 'Status:' string
S41GNA0M403704 SAMSUNG S41GNA0M403704 good
S4ELNF2N116556 SAMSUNG S4ELNF2N116556 good

# the following is not the output
#it is the file being read from
#you can see in the following text that there are 2 occurrences of Status:, I want the second one
Serial
:
S4ELNF2N116556
Size
:
512.1	GB
Bus
:
NVMe
Sectors
:
1000233648	(512	byte	sector)
HPA:
Doesn't	Exist
DCO:
Doesn't	Exist
Remapped	Sectors
:
0
Health	Status
:
good
Remapped	Sectors	After	Erasure
:
0
Start/End	Time
:
2023-09-25	14:56:18+0000	
/	
2023-09-25	14:59:12+0000
Duration
:
00:00:02:54	(DD:HH:MM:SS)
Method
:
NIST	800-88	Clear	(NVMe	Sanitize	Crypto	Erase)
Verification	Method
:
Quick	Sampling
Erasure	Rounds
:
1	(1	
firmware
)
Status
:
Erased






import re

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        mod_pattern = re.compile(r'Model\s*:\s*(\S+)', re.IGNORECASE)
        pcsn_pattern = re.compile(r'Serial.*?\s*:\s*(\S+).*?Serial\s*:\s*(\S+)', re.IGNORECASE)
        stat_pattern = re.compile(r'Status.*?\s*:\s*(\S+).*?Status\s*:\s*(\S+)', re.IGNORECASE)

        sn_match = serial_pattern.search(extracted_text)
        mod_match = mod_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        mod = mod_match.group(1) if mod_match else None
        pcsn = pcsn_match.group(2) if pcsn_match else None
        stat = stat_match.group(2) if stat_match else None

    print(sn, mod, pcsn, stat)
    return sn, mod, pcsn, stat







mod_pattern = re.compile(r'Model\s*:\s*([\s\S]+?)\b', re.IGNORECASE)

# ...

mod_match = mod_pattern.search(extracted_text)

if mod_match:
    model_line = file.readline().strip()
    model_info = mod_match.group(1)
    
    # Assuming the desired information is after the colon and space
    model = model_line.split(': ')[1]
    print(model)
else:
    print("Model information not found.")







Traceback (most recent call last):
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\s7.py", line 112, in <module>
    update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\s7.py", line 89, in update_spreadsheet
    wb = openpyxl.load_workbook(spreadsheet)
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\openpyxl\reader\excel.py", line 344, in load_workbook
    reader = ExcelReader(filename, read_only, keep_vba,
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\openpyxl\reader\excel.py", line 123, in __init__
    self.archive = _validate_archive(fn)
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\openpyxl\reader\excel.py", line 95, in _validate_archive
    archive = ZipFile(filename, 'r')
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.1776.0_x64__qbz5n2kfra8p0\Lib\zipfile.py", line 1302, in __init__
    self._RealGetContents()
  File "C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.1776.0_x64__qbz5n2kfra8p0\Lib\zipfile.py", line 1369, in _RealGetContents
    raise BadZipFile("File is not a zip file")
zipfile.BadZipFile: File is not a zip file




for root, dirs, files in os.walk(pdf_file_path):
    for file in files:
        if file.endswith('.pdf):





Warning (from warnings module):
  File "C:\Users/JPeake/OneDrive - HTG Inc/Desktop/pythonthings\openpyxl\reader\workbook.py", line 84
    warn(msg)
UserWarning: File contains an invalid specification for 0. This will be removed
[]






Warning (from warnings module):
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\openpyxl\reader\workbook.py", line 84
    warn(msg)
UserWarning: File contains an invalid specification for 0. This will be removed
Traceback (most recent call last):
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\s8.py", line 94, in <module>
    update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)     #4th if the files is a pdf, take it to the update spreadsheet function (I have had the idea that it should go to the extraction function first)
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\s8.py", line 72, in update_spreadsheet
    ws = wb['Sheet1']
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\openpyxl\workbook\workbook.py", line 287, in __getitem__
    raise KeyError("Worksheet {0} does not exist.".format(key))
KeyError: 'Worksheet Sheet1 does not exist.'








import re

string = '''dksjflks lksdjf kldk sskfj
Model: Samsung MZVLB256HAHQ-
000L7
kds kljdlk kdk lsdk ksdl fsdd'''

string_pat = re.compile(r'Model\s*:\s*([^\n]+)', re.DOTALL)
string_match = string_pat.search(string)
model_info = string_match.group(1) if string_match else None
#print(model_info)

#pattern = re.compile(fr'{model_info}\s*:\s*([^\n]+)', re.DOTALL)

pattern = re.compile(fr'Model:\s*([^\n]*\n[^\n]*)', re.DOTALL)


match = pattern.search(string)

info = match.group(1).strip() if match else None

print(info)
#In this example, fr'{model_info}\s*:\s*([^\n]+)' is an f-string where
#{model_info} is replaced by the value of the model_info variable.
#This allows you to dynamically change the pattern basedon the variable's value.
########################################################################################
'''







import PyPDF2
import re

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        model_pattern = re.compile(r'Model\s*:\s*([^\n]*\n[^\n]*)', re.DOTALL)
        pcsn_pattern = re.compile(r'Serial.*?\s*:\s*(\S+).*?Serial\s*:\s*(\S+)', re.IGNORECASE)
        stat_pattern = re.compile(r'Status.*?\s*:\s*(\S+).*?Status\s*:\s*(\S+)', re.IGNORECASE)

        sn_match = serial_pattern.search(extracted_text)
        model_match = model_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        stat_match = stat_pattern.search(extracted_text)

        sn = sn_match.group(1) if sn_match else None
        model_info = model_match.group(1).strip() if model_match else None
        pcsn = pcsn_match.group(1) if pcsn_match else None
        stat = stat_match.group(1) if stat_match else None

    return sn, model_info, pcsn, stat


import PyPDF2
import openpyxl
import os
import re

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        serial_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        model_pattern = re.compile(r'Model\s*:\s*([^\n]*\n[^\n]*)', re.DOTALL)
        pcsn_pattern = re.compile(r'Serial\s*:\s*(\S+)', re.IGNORECASE)
        stat_matches = re.findall(r'Status\s*:\s*(\S+)',extracted_text)

        sn_match = serial_pattern.search(extracted_text)
        model_match = model_pattern.search(extracted_text)
        pcsn_match = pcsn_pattern.search(extracted_text)
        

        sn = sn_match.group(1) if sn_match else None
        model_info = model_match.group(1).strip() if model_match else None
        pcsn = pcsn_match.group(1) if pcsn_match else None
        stat = stat_matches[1] if stat_matches else None

        
    print(sn,model_info,pcsn,stat)
    return sn, model_info, pcsn, stat

def update_spreadsheet(pdf_path, spreadsheet, row):
    sn, mod, pcsn, stat = extract_information(pdf_path)     #5th, make sn,mod,pcsn, and stat equal to pdf_path variable, after its been operated on by extract_information

    wb = openpyxl.load_workbook(spreadsheet)#may need to add mode=a bc stackoverflow said to        ### 22, The problem starts here.
    ws = wb['sheet']

    info = [sn, pcsn, mod, stat]
    columns = ['A', 'B', 'C', 'D']

    for col, value in zip(columns, info):
        cell = f"{col}{row}"
        ws[cell].value = value

    wb.save(spreadsheet)

spreadsheet_path = r'C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\Scripts\test1\SERIAL2.xlsx'
pdf_file_path = input("Enter the path to the PDF file: ")   #1st, asks pdf file\directory
row_number = int(input("Enter the row number in the spreadsheet: "))    #2nd, asks spreadsheet row
for root, dirs, files in os.walk(pdf_file_path):    #for root
    for file in files:
        if file.endswith('.pdf'):
            pdf_file_path = os.path.join(root,file)#    3rd, this for loop says to go through every file in the given directory, if it ends with .pdf, add it to the pdf_file_path variable
            

            update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)     #4th if the files is a pdf, take it to the update spreadsheet function (I have had the idea that it should go to the extraction function first)
            row_number += 1




import tkinter as tk
from tkinter import filedialog

class PDFExtractorGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("PDF Data Extractor")

        self.label1 = tk.Label(master, text="Select PDF Folder:")
        self.label1.pack()

        self.folder_path = tk.StringVar()
        self.entry1 = tk.Entry(master, textvariable=self.folder_path, width=50)
        self.entry1.pack()

        self.browse_button = tk.Button(master, text="Browse", command=self.browse_folder)
        self.browse_button.pack()

        self.label2 = tk.Label(master, text="Enter Row Number:")
        self.label2.pack()

        self.row_number = tk.IntVar()
        self.entry2 = tk.Entry(master, textvariable=self.row_number)
        self.entry2.pack()

        self.extract_button = tk.Button(master, text="Extract Data", command=self.extract_data)
        self.extract_button.pack()

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        self.folder_path.set(folder_selected)

    def extract_data(self):
        pdf_folder = self.folder_path.get()
        row_number = self.row_number.get()

        for root, dirs, files in os.walk(pdf_folder):
            for file in files:
                if file.endswith('.pdf'):
                    pdf_file_path = os.path.join(root, file)
                    update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
                    row_number += 1

def extract_information(pdf_path):
    # Your existing extract_information function

def update_spreadsheet(pdf_path, spreadsheet, row):
    # Your existing update_spreadsheet function

spreadsheet_path = r'C:\Users\JPeake\OneDrive - HTG Inc\Desktop\pythonthings\Scripts\test1\SERIAL2.xlsx'

root = tk.Tk()
app = PDFExtractorGUI(root)
root.mainloop()



###########################################################spreadsheet path change###################################################################
import tkinter as tk
from tkinter import filedialog

class PDFExtractorGUI:
    def __init__(self, master):
        self.master = master
        self.master.title("PDF Data Extractor")

        # PDF Folder Entry
        self.label1 = tk.Label(master, text="Select PDF Folder:")
        self.label1.pack()

        self.folder_path = tk.StringVar()
        self.entry1 = tk.Entry(master, textvariable=self.folder_path, width=50)
        self.entry1.pack()

        self.browse_button = tk.Button(master, text="Browse", command=self.browse_folder)
        self.browse_button.pack()

        # Spreadsheet Entry
        self.label3 = tk.Label(master, text="Enter Spreadsheet Path:")
        self.label3.pack()

        self.spreadsheet_path = tk.StringVar()
        self.entry3 = tk.Entry(master, textvariable=self.spreadsheet_path, width=50)
        self.entry3.pack()

        self.browse_button2 = tk.Button(master, text="Browse", command=self.browse_spreadsheet)
        self.browse_button2.pack()

        # Row Number Entry
        self.label2 = tk.Label(master, text="Enter Row Number:")
        self.label2.pack()

        self.row_number = tk.IntVar()
        self.entry2 = tk.Entry(master, textvariable=self.row_number)
        self.entry2.pack()

        # Extract Data Button
        self.extract_button = tk.Button(master, text="Extract Data", command=self.extract_data)
        self.extract_button.pack()

    def browse_folder(self):
        folder_selected = filedialog.askdirectory()
        self.folder_path.set(folder_selected)

    def browse_spreadsheet(self):
        file_selected = filedialog.askopenfilename(defaultextension=".xlsx", filetypes=[("Excel Files", "*.xlsx")])
        self.spreadsheet_path.set(file_selected)

    def extract_data(self):
        pdf_folder = self.folder_path.get()
        spreadsheet_path = self.spreadsheet_path.get()
        row_number = self.row_number.get()

        for root, dirs, files in os.walk(pdf_folder):
            for file in files:
                if file.endswith('.pdf'):
                    pdf_file_path = os.path.join(root, file)
                    update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
                    row_number += 1

def extract_information(pdf_path):
    # Your existing extract_information function

def update_spreadsheet(pdf_path, spreadsheet, row):
    # Your existing update_spreadsheet function

root = tk.Tk()
app = PDFExtractorGUI(root)
root.mainloop()

