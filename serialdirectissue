import PyPDF2,openpyxl,sys

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        x = extracted_text.index('Serial')
        sn = extracted_text[x+8:x + 24]

        y = extracted_text.index('Model')
        mod = extracted_text[y+7:y + 24]

        pc = extracted_text.index('UUID')
        pcsn = extracted_text[pc-10:pc]

        z = extracted_text.index('System')
        stat = extracted_text[z-18:z-1]

    return sn, mod, pcsn, stat

def update_spreadsheet(pdf_path, spreadsheet, row):
    sn, mod, pcsn, stat = extract_information(pdf_path)

    wb = openpyxl.load_workbook(spreadsheet)
    ws = wb['Sheet1']

    info = [sn, pcsn, mod, stat]
    columns = ['A', 'B', 'C', 'D']

    for col, value in zip(columns, info):
        cell = f"{col}{row}"
        ws[cell].value = value

    wb.save(spreadsheet)

if __name__=='__main__':
    if len(sys.argv) !=4:
        print('usage: serial3.py C:/Users/JPeake/OneDrive - HTG Inc/Desktop/test1/MHYN9K10A__na/drive_erase/erase_reports/2023-09-25T10-37-43_erase_result_1556_1_en.pdf C:/Users/JPeake/OneDrive - HTG Inc/Desktop/test1/serial.xlsx 5')
        sys.exit(1)

    pdf_path = sys.argv[1]
    spreadsheet_path = sys.argv[2]
    row_number = int(sys.argv[3])

update_spreadsheet(pdf_path, spreadsheet_path, row_number)


#I think because my files are all over the place I'm going to try to organize them.
#it basically works
#C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1>python serial3.py C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\2023-09-25T14-59-14_erase_result_1500_1_en.pdf C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\serial.xlsx 10
#Enter the path to the PDF file: C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\MHYN9K106__na\drive_erase\erase_reports\2023-09-25T15-11-11_erase_result_1133_1_en.pdf
#Enter the row number in the spreadsheet: 13

#nope it still does not work in other directories

C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1>python serial3.py C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\2023-09-25T14-59-14_erase_result_1500_1_en.pdf C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\serial.xlsx 10
Enter the path to the PDF file: C:\Users\JPeake\OneDrive - HTG Inc\Desktop\erase_reports\2023-09-25T14-59-14_erase_result_1500_1_en.pdf
Enter the row number in the spreadsheet: 8
Traceback (most recent call last):
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\serial3.py", line 70, in <module>
    update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\serial3.py", line 50, in update_spreadsheet
    sn, mod, pcsn, stat = extract_information(pdf_path)
                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\JPeake\OneDrive - HTG Inc\Desktop\test1\serial3.py", line 27, in extract_information
    with open(pdf_path, 'rb') as file:
         ^^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\JPeake\\OneDrive - HTG Inc\\Desktop\\erase_reports\\2023-09-25T14-59-14_erase_result_1500_1_en.pdf'







import os
for root, dirs, files in os.walk("/path/to/directory"):
  for file in files:
    # do something with file
#/path/to/directory is the path to the directory you want to start walking from
#root is the current directory
#dirs is a list of the subdirectories of the current directory
#files is a list of the files in the current directory


#looping through all files in a directory:
import os
your_folder = C:\sample_file #target folder
list_of_files = os.listdir(your_folder) #list of files
for file_name in list_of_files:
    if '.pdf' in file_name:
        print(file_name)

######################################################    DO NOT TOUCH, THIS ONE WORKS serial3     ##################################################################################################################
import PyPDF2
import openpyxl

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        x = extracted_text.index('Serial')
        sn = extracted_text[x+8:x + 24]

        y = extracted_text.index('Model')
        mod = extracted_text[y+7:y + 24]

        pc = extracted_text.index('UUID')
        pcsn = extracted_text[pc-10:pc]

        z = extracted_text.index('System')
        stat = extracted_text[z-18:z-1]

    return sn, mod, pcsn, stat

def update_spreadsheet(pdf_path, spreadsheet, row):
    sn, mod, pcsn, stat = extract_information(pdf_path)

    wb = openpyxl.load_workbook(spreadsheet)
    ws = wb['Sheet1']

    info = [sn, pcsn, mod, stat]
    columns = ['A', 'B', 'C', 'D']

    for col, value in zip(columns, info):
        cell = f"{col}{row}"
        ws[cell].value = value

    wb.save(spreadsheet)

# Example usage
pdf_file_path = input("Enter the path to the PDF file: ")
row_number = int(input("Enter the row number in the spreadsheet: "))

spreadsheet_path = r'C:\Users\JPeake\AppData\Local\Programs\Python\Python311\Scripts\test1\serial.xlsx'

update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
#################################################### UPDATED VERSION, WILL PROBABLY DELETE AND REPLACE THE STUFF ABOVE s5 #########
import PyPDF2
import openpyxl
import os

def extract_information(pdf_path):
    with open(pdf_path, 'rb') as file:
        pdf_reader = PyPDF2.PdfReader(file)
        extracted_text = ''

        for pgnum in range(len(pdf_reader.pages)):
            pg = pdf_reader.pages[pgnum]
            extracted_text += pg.extract_text()

        x = extracted_text.index('Serial')
        sn = extracted_text[x+8:x + 24]

        y = extracted_text.index('Model')
        mod = extracted_text[y+7:y + 24]

        pc = extracted_text.index('UUID')
        pcsn = extracted_text[pc-10:pc]

        z = extracted_text.index('System')
        stat = extracted_text[z-19:z-1]

    return sn, mod, pcsn, stat

def update_spreadsheet(pdf_path, spreadsheet, row):
    sn, mod, pcsn, stat = extract_information(pdf_path)

    wb = openpyxl.load_workbook(spreadsheet)
    ws = wb['Sheet1']

    info = [sn, pcsn, mod, stat]
    columns = ['A', 'B', 'C', 'D']

    for col, value in zip(columns, info):
        cell = f"{col}{row}"
        ws[cell].value = value

    wb.save(spreadsheet)

# Example usage
spreadsheet_path = r'C:\Users\JPeake\AppData\Local\Programs\Python\Python311\Scripts\test1\serial.xlsx'
pdf_file_path = input("Enter the path to the PDF file: ")
row_number = int(input("Enter the row number in the spreadsheet: "))
for root, dirs, files in os.walk(pdf_file_path):
    for file in files:
        if file.endswith('.pdf'):
            pdf_file_path = os.path.join(root,file)
            

            update_spreadsheet(pdf_file_path, spreadsheet_path, row_number)
            row_number += 1



#this update of the file I am working on getting the program to process multiple
#files
#the directory issue is still a thing
#my only idea for that issue as of now is ask if we can just put all of the
#erasure reports into one folder, but that might be problematic bc I assume
#they want to keep those with the rest of they're corresponding files.



#it works
#all you have to do is input the directory along with the row number to start on
#I still think I should code a check that will determine what row to start on
#I have verified that I think this works in other directories, big W
            
#let me list the things i still need to do:
            
#make that check that determines what row to start on
            
#I feel like there could be a better way to extract the information that would
#get exactly what I need, because as of now if there were a drastic change to
#the file (larger sn than normal or something) it would get more or less of
#the information

#also maybe turn the bottom part into a funciton, i think it looks kinda messy
#as is.

#finally, I think I should try to turn it into an executable file.

#although I do think I need to play around with it some more because its still
#showing duplicates
